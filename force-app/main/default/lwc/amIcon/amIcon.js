// Code generated by SF Component Library Builder. DO NOT EDIT!
import { getIcon } from "c/amIconUtils";
import { AmThemedElement } from "c/amThemedElement";
import { api } from "lwc";
export default class AmIcon extends AmThemedElement {
  /** The name of the icon.
   * E.g. 'add', 'remove', 'lock'
   */
  _name;

  @api
  get name() {
    return this._name;
  }

  set name(val) {
    this._name = val;
    this.refresh();
  }
  /** Color of the icon
   */


  _color = "font";

  @api
  get color() {
    return this._color;
  }

  set color(val) {
    this._color = val;
  }
  /** The size category of the icon
   */


  _size;

  @api
  get size() {
    return this._size;
  }

  set size(val) {
    this._size = val;
  }

  get icon() {
    return ""; //return `${nykIcons}#${this.name}`;
  }

  get brand() {
    switch (this.theme.brand) {
      case "Nykredit":
        return "nyk";

      case "SparNord":
        return "sn";

      case "ALBank":
        return "al";

      default:
        return "";
    }
  }
  /** The coloring to use on the icon
   * This is dependent on both the brand and the icon
   */


  get coloring() {
    switch (this.brand) {
      case "nyk":
        if (["lock", "add", "remove", "i-add", "i-delete", "menu-4", "menu-8", "circle-10"].includes(this.name)) {
          return "stroke";
        }

        if (["check"].includes(this.name)) {
          return "fill";
        }

        return "none";

      case "sn":
        if (["calendar-blank", "arrow-left", "arrow-right", "chevron-right", "check", "clock", "search", "radio-unchecked", "radio-unchecked-disabled", "checkmark-circle-empty", "checkmark-circle", "checkmark-square-empty", "checkmark-square"].includes(this.name)) {
          return "stroke";
        }

        return "none";

      case "al":
        if (["calendar-blank"].includes(this.name)) {
          return "stroke";
        }

        return "none";

      default:
        return "none";
    }
  }

  get classes() {
    return ["component", this.color, `icon-${this.size}`, this.coloring].join(" ");
  }

  renderedCallback() {
    this.refresh();
  }

  refresh() {
    if (!this.template) {
      return null;
    }

    const elem = this.template.querySelector("div");

    if (!elem) {
      return null;
    }

    elem.classList.value = this.classes;

    if (this.theme.brand) {
      elem.innerHTML = getIcon(this.theme.brand, this.name);
    } else {
      elem.innerHTML = "";
    }
  }

}