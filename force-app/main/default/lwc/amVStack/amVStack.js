// Code generated by SF Component Library Builder. DO NOT EDIT!
import { AmThemedElement } from "c/amThemedElement";
import { api } from "lwc";
export function emitStackEvent(that, args) {
  const evt = new CustomEvent("stack", {
    composed: true,
    bubbles: true,
    cancelable: true,
    detail: args
  });
  that.dispatchEvent(evt);
}
export default class AmVStack extends AmThemedElement {
  constructor() {
    super();
  }
  /** Dictates the spacing and contextual use of the VStack
   */


  _type;

  @api
  get type() {
    return this._type;
  }

  set type(val) {
    this._type = val;
  }

  handle = evt => {
    console.log(evt);
  };
  /** Invoked when the custom element is first connected to the document's DOM. Remove if no modification is required. */

  connectedCallback() {
    //Register event handler for capturing stacking requests
    this.template.host.addEventListener("stack", e => {
      // Stack events should not propagate as we should only set spacing once
      e.stopImmediatePropagation();
      const {
        callbacks,
        guid
      } = e.detail;
      callbacks.setStackType(this._type);
    }); //Ensure we execute the base function.

    Object.getPrototypeOf(Object.getPrototypeOf(this)).connectedCallback.bind(this)();
  }
  /** Invoked when the component rendering phase has completed. Remove if no modification is required. */


  renderedCallback() {}
  /** Invoked when the custom element is disconnected from the document's DOM. Remove if no modification is required. */


  disconnectedCallback() {
    //Ensure we execute the base function.
    Object.getPrototypeOf(Object.getPrototypeOf(this)).disconnectedCallback.bind(this)();
  }
  /**  Captures errors in all the child components in its tree during one of their lifecycle hooks. Remove if no modification is required. */


  errorCallback(error, stack) {
    //Ensure we execute the base function.
    Object.getPrototypeOf(Object.getPrototypeOf(this)).errorCallback.bind(this, error, stack)();
  }

}