// Code generated by SF Component Library Builder. DO NOT EDIT!
import { AmThemedElement } from "c/amThemedElement";
import { track } from "lwc";
import { api } from "lwc";
export default class AmCanvasButton extends AmThemedElement {
  constructor() {
    super();
  }
  /** Controls the horizontal alignment of the nested content
   */


  _alignment = "center";

  @api
  get alignment() {
    return this._alignment;
  }

  set alignment(val) {
    this._alignment = val;
  }

  get contentClasses() {
    return ["content", this.alignment].join(" ");
  }
  /** The type of the canvas button
   */


  _type;

  @api
  get type() {
    return this._type;
  }

  set type(val) {
    this._type = val;
  }

  get isAnchor() {
    return this.type === "anchor";
  }
  /** Used to change the look of the canvas button,
   * depending on whether it is active or not
   */


  _isactive = false;

  @api
  get isactive() {
    return this._isactive;
  }

  set isactive(val) {
    this._isactive = val;
  }
  /** Href for the link
   */


  _href;

  @api
  get href() {
    return this._href;
  }

  set href(val) {
    this.type === "action" && console.error('You can\'t set href on a button. Choose type "anchor".');
    this._href = val;
  }
  /** Determines if the button is disabled
   */


  _disabled;

  @api
  get disabled() {
    return this._disabled;
  }

  set disabled(val) {
    this._disabled = val;
  }

  @track
  hasSlot = {
    leading: false,
    trailing: false,
    unnamed: false
  };
  handleSlotChange = evt => {
    const path = evt.path || evt.composedPath && evt.composedPath();
    const slot = path[0];
    this.hasSlot[slot.name || "unnamed"] = slot.assignedNodes().length > 0;
  };
}